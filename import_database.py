"""
Script ƒë·ªÉ import d·ªØ li·ªáu m·∫´u v√†o database
Ch·∫°y file n√†y ƒë·ªÉ t·∫°o d·ªØ li·ªáu m·∫´u cho ·ª©ng d·ª•ng bookstore
"""

from app import app, db, User, Book, Cart, Order
from werkzeug.security import generate_password_hash
from datetime import datetime

def clear_database():
    """X√≥a t·∫•t c·∫£ d·ªØ li·ªáu hi·ªán t·∫°i"""
    print("üóëÔ∏è  ƒêang x√≥a d·ªØ li·ªáu c≈©...")
    try:
        Order.query.delete()
        Cart.query.delete()
        Book.query.delete()
        User.query.delete()
        db.session.commit()
        print("‚úÖ ƒê√£ x√≥a d·ªØ li·ªáu c≈© th√†nh c√¥ng!")
    except Exception as e:
        db.session.rollback()
        print(f"‚ùå L·ªói khi x√≥a d·ªØ li·ªáu: {e}")
        raise

def create_users():
    """T·∫°o ng∆∞·ªùi d√πng m·∫´u"""
    print("\nüë• ƒêang t·∫°o ng∆∞·ªùi d√πng...")
    
    users_data = [
        {
            'username': 'admin',
            'email': 'admin@bookstore.com',
            'password': 'admin123',  # M·∫≠t kh·∫©u g·ªëc
            'is_admin': True
        },
        {
            'username': 'tt',
            'email': 'thanhtruc@gmail.com',
            'password': 'tt123456',
            'is_admin': False
        },
        {
            'username': 'dlinh',
            'email': 'dlinh@gmail.com',
            'password': 'dlinh123',
            'is_admin': False
        },
        {
            'username': 'hoangvy',
            'email': 'hoangvy@gmail.com',
            'password': 'vy123456',
            'is_admin': False
        }
    ]
    
    users = []
    for user_data in users_data:
        user = User(
            username=user_data['username'],
            email=user_data['email'],
            password=generate_password_hash(user_data['password']),
            is_admin=user_data['is_admin'],
            created_at=datetime.utcnow()
        )
        db.session.add(user)
        users.append(user)
        print(f"  ‚úì T·∫°o user: {user_data['username']} (pass: {user_data['password']})")
    
    db.session.commit()
    print(f"‚úÖ ƒê√£ t·∫°o {len(users)} ng∆∞·ªùi d√πng!")
    return users

def create_books():
    """T·∫°o s√°ch m·∫´u"""
    print("\nüìö ƒêang t·∫°o s√°ch...")
    
    books_data = [
        {
            'title': 'ƒê·∫Øc Nh√¢n T√¢m',
            'author': 'Dale Carnegie',
            'price': 95000,
            'description': 'Cu·ªën s√°ch n·ªïi ti·∫øng v·ªÅ ngh·ªá thu·∫≠t giao ti·∫øp v√† ·ª©ng x·ª≠',
            'stock': 50,
            'image_url': 'https://dilib.vn/img/news/2022/09/larger/403-dac-nhan-tam-1.jpg?v=5198'
        },
        {
            'title': 'Nh√† Gi·∫£ Kim',
            'author': 'Paulo Coelho',
            'price': 79000,
            'description': 'H√†nh tr√¨nh t√¨m ki·∫øm kho b√°u v√† √Ω nghƒ©a cu·ªôc s·ªëng',
            'stock': 30,
            'image_url': 'https://toplist.vn/images/800px/nha-gia-kim-paulo-coelho-4777.jpg'
        },
        {
            'title': 'Sapiens',
            'author': 'Yuval Noah Harari',
            'price': 199000,
            'description': 'L∆∞·ª£c s·ª≠ lo√†i ng∆∞·ªùi t·ª´ th·ªùi nguy√™n th·ªßy ƒë·∫øn hi·ªán ƒë·∫°i',
            'stock': 25,
            'image_url': 'https://miro.medium.com/v2/resize:fit:992/1*RIkc_6ybZDixrc6mKryWcg.jpeg'
        },
        {
            'title': 'Atomic Habits',
            'author': 'James Clear',
            'price': 149000,
            'description': 'C√°ch x√¢y d·ª±ng th√≥i quen t·ªët v√† ph√° b·ªè th√≥i quen x·∫•u',
            'stock': 40,
            'image_url': 'https://cdn2.penguin.com.au/covers/original/9781473565425.jpg'
        },
        {
            'title': 'Tu·ªïi Tr·∫ª ƒê√°ng Gi√° Bao Nhi√™u',
            'author': 'Rosie Nguy·ªÖn',
            'price': 89000,
            'description': 'S√°ch v·ªÅ ph√°t tri·ªÉn b·∫£n th√¢n cho gi·ªõi tr·∫ª',
            'stock': 60,
            'image_url': 'https://bookfun.vn/wp-content/uploads/2024/08/tuoi-tre-dang-gia-bao-nhieu-1.png'
        },
        {
            'title': 'Chi·∫øn L∆∞·ª£c ƒê·∫°i D∆∞∆°ng Xanh',
            'author': 'W. Chan Kim',
            'price': 135000,
            'description': 'H∆∞·ªõng d·∫´n doanh nghi·ªáp t·∫°o th·ªã tr∆∞·ªùng m·ªõi, tr√°nh c·∫°nh tranh kh·ªëc li·ªát',
            'stock': 15,
            'image_url': 'https://tse1.mm.bing.net/th/id/OIP.gcfxZbgACFRhcHvOdfn-cQHaKX?cb=12&rs=1&pid=ImgDetMain&o=7&rm=3'
        },
        {
            'title': 'T∆∞ Duy Nhanh V√† Ch·∫≠m',
            'author': 'Daniel Kahneman',
            'price': 155000,
            'description': 'Kh√°m ph√° c√°ch con ng∆∞·ªùi ra quy·∫øt ƒë·ªãnh qua hai h·ªá th·ªëng t∆∞ duy',
            'stock': 20,
            'image_url': 'https://th.bing.com/th/id/OIP.bq4y8rzTP0a5OqV-90iC2AHaHa?o=7&cb=12rm=3&rs=1&pid=ImgDetMain&o=7&rm=3'
        },
        {
            'title': 'M·∫Øt Bi·∫øc',
            'author': 'Nguy·ªÖn Nh·∫≠t √Ånh',
            'price': 85000,
            'description': 'C√¢u chuy·ªán t√¨nh bu·ªìn v√† trong s√°ng c·ªßa Ng·∫°n v√† H√† Lan',
            'stock': 40,
            'image_url': 'https://tse1.mm.bing.net/th/id/OIP.MQCPs6JTGo36srhT4IzBVwAAAA?cb=12&rs=1&pid=ImgDetMain&o=7&rm=3'
        },
        {
            'title': 'Ch√≠ Ph√®o',
            'author': 'Nam Cao',
            'price': 55000,
            'description': 'Truy·ªán ng·∫Øn kinh ƒëi·ªÉn v·ªÅ bi k·ªãch c·ªßa ng∆∞·ªùi n√¥ng d√¢n b·ªã tha h√≥a',
            'stock': 100,
            'image_url': 'https://salt.tikicdn.com/cache/w1200/ts/product/4d/db/88/f0c2ade75790bc8335120fd270edbdbd.jpg'
        },
        {
            'title': 'M√¨nh L√† C√°, Vi·ªác C·ªßa M√¨nh L√† B∆°i',
            'author': 'Takeshi Furukawa',
            'price': 95000,
            'description': 'S√°ch truy·ªÅn ƒë·ªông l·ª±c, r·∫•t ƒë∆∞·ª£c gi·ªõi tr·∫ª Vi·ªát y√™u th√≠ch',
            'stock': 27,
            'image_url': 'https://th.bing.com/th/id/OIP.tX0P_Jbf17mdya6KbsAk7wHaNK?o=7&cb=12rm=3&rs=1&pid=ImgDetMain&o=7&rm=3'
        },
        {
            'title': 'D·∫ø M√®n Phi√™u L∆∞u K√Ω',
            'author': 'T√¥ Ho√†i',
            'price': 75000,
            'description': 'T√°c ph·∫©m thi·∫øu nhi kinh ƒëi·ªÉn k·ªÉ v·ªÅ h√†nh tr√¨nh tr∆∞·ªüng th√†nh c·ªßa D·∫ø M√®n',
            'stock': 40,
            'image_url': 'https://tse2.mm.bing.net/th/id/OIP.t1G1I0yNGQd_xK69i6zubwAAAA?cb=12&rs=1&pid=ImgDetMain&o=7&rm=3'
        }
    ]
    
    books = []
    for book_data in books_data:
        book = Book(
            title=book_data['title'],
            author=book_data['author'],
            price=book_data['price'],
            description=book_data['description'],
            stock=book_data['stock'],
            image_url=book_data['image_url'],
            created_at=datetime.utcnow()
        )
        db.session.add(book)
        books.append(book)
        print(f"  ‚úì T·∫°o s√°ch: {book_data['title']} - {book_data['price']:,}ƒë")
    
    db.session.commit()
    print(f"‚úÖ ƒê√£ t·∫°o {len(books)} cu·ªën s√°ch!")
    return books

def create_orders():
    print("\nüì¶ ƒêang t·∫°o ƒë∆°n h√†ng...")

    # L·∫•y l·∫°i danh s√°ch ng∆∞·ªùi d√πng v·ª´a ƒë∆∞·ª£c t·∫°o
    # *QUAN TR·ªåNG: C·∫ßn ƒë·∫£m b·∫£o h√†m create_users() tr·∫£ v·ªÅ danh s√°ch c√°c ƒë·ªëi t∆∞·ª£ng User
    # N·∫øu kh√¥ng, b·∫°n c·∫ßn truy v·∫•n l·∫°i t·ª´ database.
    # Tuy nhi√™n, c√°ch t·ªët nh·∫•t l√† truy·ªÅn danh s√°ch users t·ª´ h√†m main() v√†o ƒë√¢y.

    # Gi·∫£ s·ª≠ h√†m main() ƒë√£ ƒë∆∞·ª£c s·ª≠a ƒë·ªÉ truy·ªÅn users v√†o, ta s·∫Ω d√πng user.query
    # ƒë·ªÉ l·∫•y ch√≠nh x√°c ID.

    # L·∫•y c√°c ƒë·ªëi t∆∞·ª£ng ng∆∞·ªùi d√πng d·ª±a tr√™n username ƒë√£ bi·∫øt
    try:
        user_tt = User.query.filter_by(username='tt').first()
        user_dlinh = User.query.filter_by(username='dlinh').first()
        user_hoangvy = User.query.filter_by(username='hoangvy').first()
    except:
        # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p kh√¥ng t√¨m th·∫•y user (r·∫•t hi·∫øm n·∫øu create_users() th√†nh c√¥ng)
        print("‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng m·∫´u (tt, dlinh, hoangvy) trong database.")
        return []

    # L·∫•y c√°c ƒë·ªëi t∆∞·ª£ng s√°ch ƒë·ªÉ t√≠nh t·ªïng ti·ªÅn (total)
    book_nkg = Book.query.filter_by(title='Nh√† Gi·∫£ Kim').first()
    book_sp = Book.query.filter_by(title='Sapiens').first()
    book_ah = Book.query.filter_by(title='Atomic Habits').first()
    book_cl = Book.query.filter_by(title='Chi·∫øn L∆∞·ª£c ƒê·∫°i D∆∞∆°ng Xanh').first()
    book_ttdgbn = Book.query.filter_by(title='Tu·ªïi Tr·∫ª ƒê√°ng Gi√° Bao Nhi√™u').first()
    book_tdnhc = Book.query.filter_by(title='T∆∞ Duy Nhanh V√† Ch·∫≠m').first()
    book_dnt = Book.query.filter_by(title='ƒê·∫Øc Nh√¢n T√¢m').first()


    orders_data = [
        {
            'user_id': user_tt.id if user_tt else 0, # D√πng user_tt.id thay cho ID c·ªë ƒë·ªãnh
            'total': book_nkg.price + book_sp.price,
            'status': 'pending',
            'items': 'Nh√† Gi·∫£ Kim x1, Sapiens x1'
        },
        {
            'user_id': user_dlinh.id if user_dlinh else 0, # D√πng user_dlinh.id
            'total': book_ah.price + book_cl.price,
            'status': 'pending',
            'items': 'Atomic Habits x1, Chi·∫øn L∆∞·ª£c ƒê·∫°i D∆∞∆°ng Xanh x1'
        },
        {
            'user_id': user_hoangvy.id if user_hoangvy else 0, # D√πng user_hoangvy.id
            'total': book_ttdgbn.price + book_tdnhc.price,
            'status': 'pending',
            'items': 'Tu·ªïi Tr·∫ª ƒê√°ng Gi√° Bao Nhi√™u x1, T∆∞ Duy Nhanh V√† Ch·∫≠m x1'
        },
        {
            'user_id': user_hoangvy.id if user_hoangvy else 0, # D√πng user_hoangvy.id
            'total': book_dnt.price,
            'status': 'completed',
            'items': 'ƒê·∫Øc Nh√¢n T√¢m x1'
        }
    ]

    orders = []
    for data in orders_data:
        if data['user_id'] != 0: # Ch·ªâ t·∫°o ƒë∆°n h√†ng n·∫øu t√¨m th·∫•y user
            order = Order(
                user_id=data['user_id'],
                total=data['total'],
                status=data['status'],
                created_at=datetime.utcnow(),
                items=data['items']
            )
            db.session.add(order)
            orders.append(order)
            print(f"  ‚úì T·∫°o ƒë∆°n h√†ng: User {data['user_id']} - {data['total']:,}ƒë")


    try:
        db.session.commit()
        print(f"‚úÖ ƒê√£ t·∫°o {len(orders)} ƒë∆°n h√†ng!")
        return orders
    except Exception as e:
        db.session.rollback()
        print(f"\n‚ùå L·ªñI KHI T·∫†O ƒê∆†N H√ÄNG: {e.orig}") # S·ª≠a l·∫°i ƒë·ªÉ in l·ªói g·ªëc
        return []
    
def create_cart_items():
    print("\nüõí ƒêang t·∫°o gi·ªè h√†ng m·∫´u...")

    # 1. L·∫•y ƒë·ªëi t∆∞·ª£ng User (Admin) d·ª±a tr√™n username
    # Admin l√† user ƒë·∫ßu ti√™n ƒë∆∞·ª£c t·∫°o, ta s·ª≠ d·ª•ng username='admin' ƒë·ªÉ ƒë·∫£m b·∫£o l·∫•y ƒë√∫ng ID
    admin_user = User.query.filter_by(username='admin').first()

    # 2. L·∫•y ƒë·ªëi t∆∞·ª£ng Book (v√≠ d·ª•: Atomic Habits) d·ª±a tr√™n t√™n s√°ch
    book = Book.query.filter_by(title='Atomic Habits').first()

    if not admin_user:
        print("‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng 'admin'.")
        return []

    if not book:
        print("‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y s√°ch 'Atomic Habits'.")
        return []

    # 3. T·∫°o m·ªôt m·ª•c gi·ªè h√†ng cho Admin
    try:
        cart_item = Cart(
            user_id=admin_user.id, # S·ª≠ d·ª•ng ID th·ª±c t·∫ø c·ªßa Admin
            book_id=book.id,       # S·ª≠ d·ª•ng ID th·ª±c t·∫ø c·ªßa s√°ch
            quantity=1
        )
        db.session.add(cart_item)
        db.session.commit()
        print(f"  ‚úì T·∫°o gi·ªè h√†ng: Admin (ID: {admin_user.id}) - {book.title} x1")
        print("‚úÖ ƒê√£ t·∫°o 1 m·ª•c gi·ªè h√†ng!")
        return [cart_item]
    except Exception as e:
        db.session.rollback()
        # B·∫Øt l·ªói IntegrityError ƒë·ªÉ b√°o l·ªói chi ti·∫øt h∆°n
        print(f"\n‚ùå L·ªñI KHI T·∫†O GI·ªé H√ÄNG: {e.orig}")
        return []
    
def seed_book_reviews():
    """
    H√†m th√™m d·ªØ li·ªáu m·∫´u chi ti·∫øt cho ƒë√°nh gi√° s√°ch
    """
    # Danh s√°ch nh·∫≠n x√©t chi ti·∫øt theo t·ª´ng th·ªÉ lo·∫°i s√°ch
    review_comments = {
        # S√°ch vƒÉn h·ªçc
        'literary': [
            "M·ªôt t√°c ph·∫©m ngh·ªá thu·∫≠t, t·ª´ng c√¢u t·ª´ ƒë·ªÅu ƒë∆∞·ª£c chƒÉm ch√∫t.",
            "C·ªët truy·ªán s√¢u s·∫Øc, kh∆°i g·ª£i nhi·ªÅu c·∫£m x√∫c.",
            "T√°c gi·∫£ ƒë√£ th√†nh c√¥ng trong vi·ªác kh·∫Øc h·ªça t√¢m l√Ω nh√¢n v·∫≠t.",
            "M·ªôt g√≥c nh√¨n m·ªõi m·∫ª v√† s√°ng t·∫°o v·ªÅ cu·ªôc s·ªëng.",
            "VƒÉn phong tinh t·∫ø, ƒë·ªçc nh∆∞ m·ªôt b·∫£n nh·∫°c.",
        ],
        
        # S√°ch ph√°t tri·ªÉn b·∫£n th√¢n
        'self_help': [
            "Nh·ªØng l·ªùi khuy√™n th·ª±c t·∫ø v√† √°p d·ª•ng ƒë∆∞·ª£c ngay.",
            "ƒê√£ thay ƒë·ªïi c√°ch nh√¨n c·ªßa t√¥i v·ªÅ b·∫£n th√¢n.",
            "R·∫•t h·ªØu √≠ch cho vi·ªác ph√°t tri·ªÉn k·ªπ nƒÉng s·ªëng.",
            "Nh·ªØng insights s√¢u s·∫Øc v√† ƒë·∫ßy ƒë·ªông l·ª±c.",
            "Cu·ªën s√°ch nh∆∞ m·ªôt ng∆∞·ªùi b·∫°n ƒë·ªìng h√†nh.",
        ],
        
        # S√°ch kinh doanh
        'business': [
            "Nh·ªØng chi·∫øn l∆∞·ª£c kinh doanh th·ª±c t·∫ø v√† hi·ªáu qu·∫£.",
            "ƒê√£ h·ªçc ƒë∆∞·ª£c nhi·ªÅu b√†i h·ªçc quan tr·ªçng t·ª´ kinh nghi·ªám c·ªßa c√°c chuy√™n gia.",
            "R·∫•t h·ªØu √≠ch cho nh·ªØng ai mu·ªën kh·ªüi nghi·ªáp.",
            "Cung c·∫•p c√°i nh√¨n to√†n di·ªán v·ªÅ th·∫ø gi·ªõi kinh doanh.",
            "Nh·ªØng v√≠ d·ª• minh h·ªça r√µ r√†ng v√† thuy·∫øt ph·ª•c.",
        ],
        
        # S√°ch khoa h·ªçc
        'science': [
            "Gi·∫£i th√≠ch c√°c kh√°i ni·ªám ph·ª©c t·∫°p m·ªôt c√°ch d·ªÖ hi·ªÉu.",
            "M·ªü r·ªông t·∫ßm nh√¨n v·ªÅ th·∫ø gi·ªõi khoa h·ªçc.",
            "Nh·ªØng ph√°t hi·ªán m·ªõi v√† th√∫ v·ªã.",
            "Vi·∫øt r·∫•t chuy√™n nghi·ªáp nh∆∞ng v·∫´n h·∫•p d·∫´n.",
            "Ngu·ªìn th√¥ng tin ƒë√°ng tin c·∫≠y v√† chi ti·∫øt.",
        ],
        
        # S√°ch du k√Ω
        'travel': [
            "Nh∆∞ ƒë∆∞·ª£c tr·∫£i nghi·ªám m·ªôt cu·ªôc phi√™u l∆∞u th·ª±c s·ª±.",
            "Nh·ªØng m√¥ t·∫£ s·ªëng ƒë·ªông v√† ch√¢n th·ª±c.",
            "Kh∆°i g·ª£i ni·ªÅm ƒëam m√™ du l·ªãch v√† kh√°m ph√°.",
            "Cung c·∫•p c√°i nh√¨n s√¢u s·∫Øc v·ªÅ c√°c n·ªÅn vƒÉn h√≥a.",
            "Nh·ªØng c√¢u chuy·ªán kh√¥ng th·ªÉ r·ªùi m·∫Øt.",
        ]
    }

    # Chi ti·∫øt nh·∫≠n x√©t cho t·ª´ng m·ª©c ƒë√°nh gi√°
    rating_comments = {
        5: [
            "Tuy·ªát v·ªùi! M·ªôt trong nh·ªØng cu·ªën s√°ch hay nh·∫•t t√¥i t·ª´ng ƒë·ªçc.",
            "Ho√†n h·∫£o t·ª´ng chi ti·∫øt, kh√¥ng th·ªÉ ch√™ ƒë∆∞·ª£c.",
            "M·ªôt ki·ªát t√°c! T√¥i s·∫Ω ƒë·ªçc ƒëi ƒë·ªçc l·∫°i nhi·ªÅu l·∫ßn.",
            "V∆∞·ª£t xa m·ªçi k·ª≥ v·ªçng c·ªßa t√¥i.",
            "M·ªôt tr·∫£i nghi·ªám ƒë·ªçc s√°ch tuy·ªát v·ªùi!"
        ],
        4: [
            "R·∫•t hay, ch·ªâ thi·∫øu m·ªôt ch√∫t ƒë·ªÉ ho√†n h·∫£o.",
            "ƒê√°ng ƒë·ªÉ ƒë·ªçc, c√≥ nhi·ªÅu insights th√∫ v·ªã.",
            "·∫§n t∆∞·ª£ng v·ªõi ph·∫ßn l·ªõn n·ªôi dung.",
            "Khuy·∫øn kh√≠ch m·ªçi ng∆∞·ªùi n√™n ƒë·ªçc.",
            "M·ªôt cu·ªën s√°ch ƒë√°ng gi√° th·ªùi gian."
        ],
        3: [
            "·ªû m·ª©c trung b√¨nh, c√≥ c·∫£ ∆∞u v√† nh∆∞·ª£c ƒëi·ªÉm.",
            "M·ªôt s·ªë ph·∫ßn r·∫•t hay, m·ªôt s·ªë ph·∫ßn h∆°i nh·∫°t.",
            "ƒê·ªçc ƒë∆∞·ª£c nh∆∞ng ch∆∞a th·ª±c s·ª± ·∫•n t∆∞·ª£ng.",
            "C√≥ th·ªÉ c·∫£i thi·ªán ·ªü m·ªôt s·ªë kh√≠a c·∫°nh.",
            "Kh√¥ng t·ªá nh∆∞ng c≈©ng ch∆∞a th·ª±c s·ª± xu·∫•t s·∫Øc."
        ],
        2: [
            "C√≤n nhi·ªÅu ƒëi·ªÉm ch∆∞a thuy·∫øt ph·ª•c.",
            "Kh√° th·∫•t v·ªçng so v·ªõi mong ƒë·ª£i.",
            "Thi·∫øu chi·ªÅu s√¢u v√† s·ª± thuy·∫øt ph·ª•c.",
            "C·∫ßn nhi·ªÅu c·∫£i thi·ªán.",
            "Ch∆∞a ƒë√°p ·ª©ng ƒë∆∞·ª£c k·ª≥ v·ªçng."
        ],
        1: [
            "Ho√†n to√†n kh√¥ng ƒë√°p ·ª©ng ƒë∆∞·ª£c mong ƒë·ª£i.",
            "S√°ch n√†y th·ª±c s·ª± kh√¥ng ƒë√°ng ƒë·ªÉ ƒë·ªçc.",
            "R·∫•t th·∫•t v·ªçng v·ªõi n·ªôi dung.",
            "Kh√¥ng th·ªÉ hi·ªÉu t·∫°i sao s√°ch l·∫°i ƒë∆∞·ª£c xu·∫•t b·∫£n.",
            "L√£ng ph√≠ th·ªùi gian v√† ti·ªÅn b·∫°c."
        ]
    }

    # L·∫•y danh s√°ch users v√† books
    users = User.query.all()
    books = Book.query.all()

    # S·ªë l∆∞·ª£ng ƒë√°nh gi√° mu·ªën t·∫°o
    review_count = 200

    # Seed d·ªØ li·ªáu
    for _ in range(review_count):
        user = random.choice(users)
        book = random.choice(books)
        
        # X√°c ƒë·ªãnh th·ªÉ lo·∫°i s√°ch (gi·∫£ ƒë·ªãnh d·ª±a tr√™n ti√™u ƒë·ªÅ)
        book_category = 'literary'
        if 'Kinh doanh' in book.title or 'Startup' in book.title:
            book_category = 'business'
        elif 'Khoa h·ªçc' in book.title or 'C√¥ng ngh·ªá' in book.title:
            book_category = 'science'
        elif 'Du k√Ω' in book.title or 'Phi√™u l∆∞u' in book.title:
            book_category = 'travel'
        elif 'Ph√°t tri·ªÉn' in book.title or 'K·ªπ nƒÉng' in book.title:
            book_category = 'self_help'

        # Ch·ªçn ng·∫´u nhi√™n rating
        rating = random.randint(1, 5)
        
        # Ch·ªçn comment ph√π h·ª£p v·ªõi th·ªÉ lo·∫°i v√† rating
        comment = random.choice(review_comments.get(book_category, review_comments['literary']))
        
        # Th√™m m·ªôt s·ªë comment c·ª• th·ªÉ theo rating
        if random.random() < 0.3:  # 30% s·∫Ω d√πng comment theo rating
            comment = random.choice(rating_comments[rating])

        # Ki·ªÉm tra ƒë√°nh gi√° ƒë√£ t·ªìn t·∫°i ch∆∞a
        existing_review = BookReview.query.filter_by(
            user_id=user.id, 
            book_id=book.id
        ).first()

        if not existing_review:
            review = BookReview(
                user_id=user.id,
                book_id=book.id,
                rating=rating,
                comment=comment,
                created_at=datetime.utcnow() - timedelta(days=random.randint(0, 365))
            )
            db.session.add(review)

    # Commit changes
    db.session.commit()
    print(f"ƒê√£ th√™m {review_count} ƒë√°nh gi√° m·∫´u.")




def main():
    """H√†m ch√≠nh ƒë·ªÉ ch·∫°y import"""
    print("=" * 60)
    print("üöÄ B·∫ÆT ƒê·∫¶U IMPORT D·ªÆ LI·ªÜU V√ÄO DATABASE")
    print("=" * 60)
    
    with app.app_context():
        try:
            # T·∫°o t·∫•t c·∫£ c√°c b·∫£ng n·∫øu ch∆∞a c√≥
            print("\nüìã ƒêang t·∫°o c√°c b·∫£ng trong database...")
            db.create_all()
            print("‚úÖ ƒê√£ t·∫°o c√°c b·∫£ng!")
            
            # X√≥a d·ªØ li·ªáu c≈©
            clear_database()
            
            # T·∫°o d·ªØ li·ªáu m·ªõi
            users = create_users()
            books = create_books()
            orders = create_orders()
            create_cart_items()
            
            print("\n" + "=" * 60)
            print("‚úÖ HO√ÄN T·∫§T IMPORT D·ªÆ LI·ªÜU!")
            print("=" * 60)
            print("\nüìä T·ªîNG K·∫æT:")
            print(f"  ‚Ä¢ Ng∆∞·ªùi d√πng: {len(users)}")
            print(f"  ‚Ä¢ S√°ch: {len(books)}")
            print(f"  ‚Ä¢ ƒê∆°n h√†ng: {len(orders)}")
            print(f"  ‚Ä¢ Gi·ªè h√†ng: 1 m·ª•c")
            
            print("\nüîê TH√îNG TIN ƒêƒÇNG NH·∫¨P:")
            print("  Admin:")
            print("    - Username: admin")
            print("    - Password: admin123")
            print("\n  User th∆∞·ªùng:")
            print("    - Username: tt | Password: tt123456")
            print("    - Username: dlinh | Password: dlinh123")
            print("    - Username: hoangvy | Password: vy123456")
            
            print("\nüí° B√¢y gi·ªù b·∫°n c√≥ th·ªÉ ch·∫°y: python app.py")
            print("=" * 60)
            
        except Exception as e:
            print(f"\n‚ùå L·ªñI: {e}")
            db.session.rollback()
            raise

if __name__ == '__main__':
    main()